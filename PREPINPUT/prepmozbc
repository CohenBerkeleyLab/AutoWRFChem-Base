#!/bin/bash
# Last one: this one needs to restore the full namelist, then
# run real for the entire time period with biogenic emissions.
# The only annoying part will be choosing which input file to 
# use. That will need to retrieve the value for chem_opt and
# know which .inp file goes with which mechanism.
#
# For expandability, those mappings are included in a text file
# that this script could parse. If each line was of the format
# number=file, i.e. 2=RADM2SORG.inp, then this could be done
# with i=`expr index "$line" "="` and ${line:i}

cd `dirname $0`
mydir=`pwd -P`
rootdir=$(cd ../..; pwd -P)
pyprog="$mydir/../CONFIG/autowrf_namelist_main.py"
chemopt=`python $pyprog get-wrf-opt --chem_opt`

if [ -z "$chemopt" ]; then
    echo "Failed to obtain the value of chem_opt. I do not know why that happened."
    echo "Aborting MOZBC"
    exit 1
fi

. "$mydir/../wrfbuild.cfg" # this will get the variable mozbcFile
if [ -z $mozbcFile ]; then
    echo "No mozbc file set in wrfbuild.cfg! Use autowrfchem config namelist to choose one."
    echo "Aborting MOZBC"
    exit 1
fi

# Find out if the file is a GEOS-chem derived file. This ungodly long command prints the global attributes
# for the file, finds the one called 'title', and cuts the string down to its value, trimming spaces at the
# beginning and end. The grep specifically looks for "title" after "Global attribute n:" where n is a 1-4 
# digit number to ensure that we are getting the title attribute and not some other attribute line that happens
# to include the string "title"
echo "$mozbcFile"
mozfiletitle=$(ncks -M "$rootdir/MOZBC/data/$mozbcFile" | grep -E 'Global attribute [[:digit:]]{1,4}: title' | cut -f 3 -d '=' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

listfile="mozbc-chemopt-list.txt"
while read -r line; do
    if [ -z "$line" ]; then
        continue
    elif [ ${line:0:1} == "#" ]; then
        continue
    fi

    i=`expr index "$line" "="`
    if [ $i -eq 0 ]; then
        continue
    fi

    lopt=${line:0:$((i-1))}
    fname=${line:i}
    if [ $lopt -eq $chemopt ]; then
        mozfile=$fname
        break
    fi
done < "$listfile"

if [ -z "$mozfile" ]; then
    echo "No input file specified for chem_opt=$chemopt in $listfile"
    echo "You should edit the list file to specify the correct input"
    echo "file for your chemistry. If there isn't one, specify the file"
    echo "as NONE."
    echo "Aborting MOZBC"
    exit 1
elif [ "$mozfile" == "NONE" ]; then
    echo "No MOZART --> WRF-Chem mapping available for chem_opt=$chemopt"
    echo "Skipping MOZBC."
    exit 0
fi

# If the netCDF file is a GEOS-Chem derived file, append -GC to the input file
# name. Perhaps this should instead allow the user to pick the file out of a 
# comma separated list in the list file?
if [[ $mozfiletitle == "GEOS-Chem" ]]; then
    oldifs=$IFS # storing this to reset may be unecessary, but seems safer
    IFS='.', read fstem fext <<< "$mozfile"
    IFS=$oldifs
    mozfile="${fstem}-GC.${fext}"
    echo "netCDF file $mozbcFile looks to be derived from GEOS-Chem with gc2moz.py"
fi

echo "Using $mozfile as the input"

# Double check that the input file exists BEFORE we run real (why waste time if
# it's not going to work?)
cd ../../MOZBC/src
if [ ! -f "$mozfile" ]; then
    echo "$mozfile (the specified .inp file for chem_opt=$chemopt does not exist."
    echo "Aborting MOZBC"
    exit 1
fi

# Modify the input file to have the proper data file
oldline=`grep -- "fn_moz" "$mozfile"`
newline="fn_moz = '$mozbcFile'"

perl -pi -e "s/$oldline/$newline/g" $mozfile

cd ../../WRFV3/run
# Ensure that the namelist is back to the regular options
python $pyprog tempmod
# Then double check that the NEI and MEGAN outputs are here
missingfiles=false
if [ ! -f "wrfchemi_00z_d01" -o ! -f "wrfchemi_12z_d01" ]; then
    echo "One or both of wrfchemi_00z_d01, wrfchemi_12z_d01 are not present in run directory"
    missingfiles=true
fi
if [ ! -f "wrfbiochemi_d01" ]; then
    echo "wrfbiochemi_d01 is not present in run directory"
    missingfiles=true
fi
if $missingfiles; then
    echo "Aborting MOZBC because previous input preparation steps failed."
    echo ""
    exit 1
fi

# Also double check the grid_fdda setting. if $FDDA_ON was set in the main prepinpt script,
# then grid_fdda should be on here. If not, something weird is going on.
if [[ $FDDA_ON == 1 ]]; then
    python $pyprog check-wrf-opt --grid_fdda=1
    fdda_check=$?
    if [[ $fdda_check == 1 ]]; then
        echo "Problem with prepmozbc: the main prepinpt script found that grid_fdda==1 in namelist.input"
        echo "at the beginning of the input prep run and set the env. variable FDDA_ON to 1, but grid_fdda"
        echo "did not get returned to 1 in the namelist before running the last instance of real.exe"
        echo "Aborting MOZBC"
        exit 1
    elif [[ $fdda_check == 2 ]]; then
        echo "Problem with prepmozbc: the main prepinpt script found that grid_fdda==1 in namelist.input"
        echo "at the beginning of the input prep run and set the env. variable FDDA_ON to 1, but grid_fdda"
        echo "does not exist in the namelist now." 
        echo "Aborting MOZBC"
        exit 1
    elif [[ $fdda_check != 0 ]]; then
        echo "Problem with prepmozbc: checking for the value of grid_fdda failed with an exit code of $fdda_check"
        echo "Typically, the only exit codes should be 0 (option is correct), 1 (option is wrong), or 2"
        echo "(option not found in namelist). Has $pyprog"
        echo "been updated since the last time prepmozbc was edited?"
        echo "Aborting MOZBC"
        exit 1 
    fi
fi

./real.exe
realexit=$?
if [ $realexit -ne 0 ]; then
    echo "real.exe failed with exit code $realexit while running the full time period before"
    echo "running MOZBC. You should run real.exe manually (with mpirun, if WRF is compiled in"
    echo "parallel) and check the output to determine the cause."
    echo "Aborting MOZBC"
    exit 1
fi

# Check that the chosen MOZART file satisfies the buffer size around the WRF domain as well as the time period
# needed. This needs to happen after running real.exe to ensure that the results are consistent with the 
# final version of wrfinput
wrfstart="$(python $pyprog get-wrf-opt --start-date)"
wrfend="$(python $pyprog get-wrf-opt --end-date)"
python "$mydir/mozcheck.py" "$rootdir/MOZBC/data/$mozbcFile" "$rootdir/WRFV3/run/wrfinput_d01" "$wrfend" "$wrfstart"
moztst=$?
if [ $moztst -ne 0 ]; then
    echo ""
    echo "prepmozbc: See above problems with MOZBC input file." 
    echo "Choose a different file with autowrfchem config namelist."
    echo "Aborting MOZBC"
    exit 1
fi

cd ../../MOZBC/src
./mozbc < "$mozfile" >& "$mydir/../PREPLOGS/mozbc.log"
mozexit=$?
if [ $mozexit -ne 0 ]; then
    echo "MOZBC failed with exit code ${mozexit}. You should run mozbc manually (with the command"
    echo "./mozbc < $mozfile in MOZBC/src) to determine the cause. If the cause is a missing variable"
    echo "(WRF or MOZART), it would be a good idea to run mozbc manually until you're sure that"
    echo "all missing variables have been dealt with."
    exit 1
else
    exit 0
fi
