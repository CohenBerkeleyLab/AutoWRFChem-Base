#!/bin/bash
#
# This will be responsible for running all of the 
# input data prep (WPS, NEI, MEGAN, MOZBC)

mydir=$(dirname $0) # always find this directory, which should be PREPINPUT
cd $mydir
mydir=`pwd -P`
pyprog="$mydir/../CONFIG/autowrf_namelist_main.py"
# This must contain definitions of the variables
# metType and metDir. metType must match the ungrib
# Vtable name. Source both.
. "$mydir/../wrfbuild.cfg"
# This ensures all necessary env. vars. are set
. "$mydir/../envvar_wrfchem.cfg"

#############
#### WPS ####
#############

cd "$mydir/../../WPS"

# Ensure that the WPS namelist is linked to the one in the CONFIG folder
if [ -e namelist.wps ]; then
    # Back up only if not a link already
    lnk=`readlink namelist.wps`
    if [ ! -z $lnk ]; then
        mv namelist.wps namelist.wps.autowrf-backup
    fi
fi
ln -s "$mydir/../CONFIG/namelist.wps"

# First make sure that the GEOGRID table is the ARW_CHEM table
# and that the ungrib Vtable matches the requested meteorology
#
# Backup the GEOGRID.TBL link first. Need to see if it is a link
cd geogrid
if [ -f GEOGRID.TBL ]; then
    lnk=$(readlink GEOGRID.TBL)
    if [ -z $lnk ]; then
        cp GEOGRID.TBL GEOGRID.TBL.BACKUP
    else
        ln -s $lnk GEOGRID.TBL.BACKUP
    fi
fi
# Now link the the ARW_CHEM file
echo "Linking GEOGRID.TBL.ARW_CHEM as GEOGRID.TBL."
ln -sf GEOGRID.TBL.ARW_CHEM GEOGRID.TBL
cd ..

# Now handle the ungrib Vtable link
if [ -f Vtable ]; then
    lnk=$(readlink Vtable)
    if [ -z $lnk ]; then
        cp Vtable Vtable.BACKUP
    else
        ln -s $lnk Vtable.BACKUP
    fi
fi

ln -sf ungrib/Variable_Tables/Vtable.${metType} Vtable


# Begin by running geogrid
./geogrid.exe >& "$mydir/../PREPLOGS/geogrid.log"
ggexit=$?
if [ $ggexit != 0 ]; then
    echo "GEOGRID.exe failed with exit code $ggexit"
    exit 1
fi

# Then ungrib. Need to link the met data first
./link_grib.csh $metDir/$metType
lnkexit=$?
if [ $lnkexit != 0 ]; then
    echo "LINK_GRIB.CSH failed with exit code $lnkexit"
    exit 1
fi
./ungrib.exe >& "$mydir/../PREPLOGS/ungrib.log"
ugexit=$?
if [ $ugexit != 0 ]; then
    echo "UNGRIB.EXE failed with exit code $ugexit"
    exit 1
fi

# Finally metgrid
rm -f met_em*
./metgrid.exe >& "$mydir/../PREPLOGS/metgrid.log"
mgexit=$?
if [ $mgexit != 0 ]; then
    echo "METGRID.EXE failed with exit code $mgexit"
    exit 1
fi

# Remove the intermediate files
rm -f GRIBFILE*
prefix="`python $pyprog get-wps-opt --no-quotes --prefix`"
rm -f "${prefix}"*

# Now go over to the run directory and link this meteorology
cd ../WRFV3/run
rm -f met_em*
p="../../WPS/met_em*"
for f in $p; do
    ln -s $f
done

# If using lat-lon map projection, then we need to modify the
# WRF namelist permanently to account for the fact that the
# dx dy in the WPS namelist is ONLY IN THAT CASE given in degrees
# but the WRF namelist still expects meters
mapproj=`python $pyprog get-wps-opt --no-quotes --map_proj`
if [ "$mapproj" == "lat-lon" ]; then
    which ncdump > /dev/null
    if [ $? -ne 0 ]; then
        echo ""
        echo "***********************************************************************************"
        echo "WARNING: You are using a LAT-LON map projection and do not have NCDUMP on your path"
        echo "  AUTOWRFCHEM uses NCDUMP to convert DX,DY in the WPS namelist into meters for WRF."
        echo "  Without NCDUMP, you will need to manually edit namelist.input in"
        echo "  $mydir/../CONFIG"
        echo "  to get DX and DY right."
        echo "***********************************************************************************"
        echo ""
    else
        # These work together to capture the number as, e.g.
        #   977.123f --> 977.123
        #   977.f --> 977
        #   977f --> 977
        # Basically we only want the decimal point if followed by numbers
        regex1="[0-9]+\.[0-9]+"
        regex2="[0-9]+"
        metfile=`ls -1 met_em* | head -n 1`
        dx=`ncdump -h $metfile | grep ":DX"`
        if [[ $dx =~ $regex1 ]] || [[ $dx =~ $regex2 ]]; then
            dxNum=${BASH_REMATCH[0]}
        fi
        dy=`ncdump -h $metfile | grep ":DY"`
        if [[ $dy =~ $regex1 ]] || [[ $dy =~ $regex2 ]]; then
            dyNum=${BASH_REMATCH[0]}
        fi

        if [ -z "$dxNum" ] || [ -z "$dyNum" ]; then
            echo ""
            echo "*****************************************************"
            echo "Failed to obtain DX or DY from the meteorology files."
            echo "You will need to manually edit namelist.input in"
            echo "$mydir/../CONFIG"
            echo "to get DX and DY right."
            echo "*****************************************************"
            echo ""
        else
            echo ""
            echo "***************************************************************************"
            echo "LAT-LON map proj: Setting DX and DY in namelist.input to match met_em files"
            echo "***************************************************************************"
            echo ""
            python $pyprog mod --force-wrf-only --dx=$dxNum
            python $pyprog mod --force-wrf-only --dy=$dyNum
        fi
    fi
fi
