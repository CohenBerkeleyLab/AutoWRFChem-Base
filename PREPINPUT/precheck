#!/bin/bash

# Input Parsing

metonly=false
chemonly=false

while [[ $# -gt 0 ]]; do
    case $1 in
    --met-only)
        metonly=true
        ;;
    --chem-only)
        chemonly=true
        ;;
    esac
    shift
done

# End Input parsing


# Reference this script
cd "$(dirname $0)"
mydir="$(pwd -P)"
rootdir="$(cd ../..; pwd -P)"
pyprog="$mydir/../CONFIG/autowrf_namelist_main.py"

# Ensure the PREPLOGS directory exists
if [ ! -d "$mydir/../PREPLOGS" ]; then
    mkdir "$mydir/../PREPLOGS"
fi

# Reset the namelist to default state
python "$pyprog" tempmod

# Verify that the settings needed for NEI and MEGAN are present in the current namelist
badopts=false

if ! $metonly; then
    # Check various options needed for NEI to work
    python $pyprog check-wrf-opt --io_form_auxinput5=2,11 --io_style_emissions=1 --emiss_inpt_opt=1
    optchk=$?
    if [ $optchk -gt 0 ]; then
        echo ""
        echo "One or more of the namelist options expected if using NEI are incorrect."
        echo "Run 'autowrfchem config namelist' and use the NEI compatibility checker"
        echo "on the current namelist."
        badopts=true
    fi

    python $pyprog check-wps-opt --map_proj=lambert,polar
    optchk=$?
    if [ $optchk -gt 0 ]; then
        echo ""
        echo "NEI emissions only work with lambert or polar map projections. If trying to use a different"
        echo "map projection with custom emissions, you may run autowrfchem prepinpt with the"
        echo "'met-only' flag, which will only produce meteorology. You will need to supply the"
        echo "remaining inputs manually."
        badopts=true
    fi

    # Do the same for MEGAN
    python $pyprog check_wrf_opt --io_form_auxinput6=2,11 --bio_emiss_opt=3
    optchk=$?
    if [ $optchk -ne 0 ]; then
        echo ""
        echo "To use MEGAN for biogenic emissions, you must have io_form_auxinput6 set"
        echo "to 2 or 11 under the &time_control section of the WRF namelist (11 will"
        echo "only work if parallel netCDF is installed) and bio_emiss_opt set to 3"
        echo "under the &chem section of the namelist. One or both of these is not"
        echo "true. Correct them and rerun the input preparation."
        badopts=true
    fi
fi

# Make sure that the met directory exists as does the mozbc file and the 
# MEGAN and NEI data
if [ -f "$mydir/../wrfbuild.cfg" ]; then
    . "$mydir/../wrfbuild.cfg" # source the file with metType, metDir, and mozbcFile in it
else
    echo "wrfbuild.cfg does not exist. Run autowrfchem config at least once to generate it."
    exit 1
fi

# We'll need these a couple places
wrfstart="$(python $pyprog get-wrf-opt --start-date)"
wrfend="$(python $pyprog get-wrf-opt --end-date)"

if ! $chemonly; then
    # Check the met directory from WPS since that's where it'll be called from
    cd "$rootdir/WPS"
    wpsdir="$(pwd -P)"
    if [ ! -d "$metDir" ]; then
        echo ""
        echo "The directory supposedly containing the meteorology data"
        echo "(metDir = $metDir)"
        echo "does not exist. Fix it in $mydir/../wrfbuild.cfg."
        badopts=true
        nometdir=true
    else
        nometdir=false
    fi

    # Verify that the raw met files needed are present in the met directory
    if ! $nometdir; then
        reqmetfiles=$(python "$mydir/metgriblist.py" "$metType" "$wrfstart" "$wrfend")
        cd "$metDir"
        missingMetFiles=""
        for metfile in $reqmetfiles; do
            if [[ ! -f $metfile ]]; then
                missingMetFiles="$missingMetFiles $metfile"
            fi
        done

        if [[ ! -z $missingMetFiles ]]; then
            echo "The following expected met files could not be found in"
            echo "$metDir"
            for f in $missingMetFiles; do
                echo "    $f"
            done
            badopts=true
        else
            echo "Pass: All raw met files found"
        fi
    fi

    # Need to go back to WPS directory so the relative paths work
    cd "$wpsdir"

    # Also check the geog_data_path and constants file
    geogpath="`python $pyprog get-wps-opt --no-quotes --geog_data_path`"
    if [ $? -ne 0 ]; then
        echo ""
        echo "Fail: The option 'geog_data_path' is not specified in the WPS namelist, and it should be."
        badopts=true
    elif [ ! -d "$geogpath" ]; then
        echo ""
        echo "Fail: The WPS geog_data_path $geogpath is not a directory."
        badopts=true
    else:
        echo "Pass: WPS geog_data_path is a directory"
    fi
    constfile="`python $pyprog get-wps-opt --no-quotes --constants_name`"
    if [ $? -ne 0 ]; then
        echo ""
        echo "Fail: The option 'constants_name' is not specified in the WPS namelist, and it should be."
        badopts=true
    elif [ ! -f "$constfile" ]; then
        echo ""
        echo "Fail: The WPS constants file $constfile does not exist."
        badopts=true
    else
        echo "Pass: WPS constants file found."
    fi
fi

if ! $metonly; then
    cd "$rootdir/NEI"
    ls 2011/area4k >& /dev/null
    areatst=$?
    ls 2011/point >& /dev/null
    pointtst=$?
    if [ $areatst -ne 0 -o $pointtst -ne 0 ]; then
        echo ""
        echo "Fail: Could not find 2011/area4k and/or 2011/point in NEI."
        echo "Is the directory 2011 present or linked there?"
        echo "Does it contain area4k and point as immediate subdirectories?"
        badopts=true
    else
        echo ""
        echo "Pass: Found NEI/2011/area4k and NEI/2011/point"
    fi
    # Check 2005 under certain conditions?

    cd "$rootdir/MEGAN"
    ls data/lai* >& /dev/null
    megtst=$?
    if [ $megtst -ne 0 ]; then
        echo ""
        echo "Fail: Could not find any lai* files under data/ in MEGAN."
        echo "Is data a directory in MEGAN that contains the MEGAN data,"
        echo "or a link to such a directory?"
        badopts=true
    else
        echo ""
        echo "Pass: Found lai* files under MEGAN/data."
    fi

    # Now check the MOZBC file
    cd "$rootdir/MOZBC"
    if [ ! -f "data/$mozbcFile" ]; then
        echo ""
        echo "Cannot find data/$mozbcFile"
        echo "from the MOZBC directory. Is the data directory or link present?"
        echo "If so, is the file directly in that directory (not a subdirectory?)"
        badopts=true
    fi

    echo ""
    if [ ! -f "$rootdir/WRFV3/run/wrfinput_d01" ]; then
        echo "wrfinput_d01 not created yet. Holding off on checking MOZ file."
    else
        python "$mydir/mozcheck.py" "$rootdir/MOZBC/data/$mozbcFile" "$rootdir/WRFV3/run/wrfinput_d01" "$wrfstart" "$wrfend"
        moztst=$?
        if [ $moztst -ne 0 ]; then
            echo ""
            echo "Fail: See above problems with MOZBC input file." 
            echo "Choose a different file with autowrfchem config namelist."
            badopts=true
        else
            echo "Pass: MOZBC meets safety check (10 deg buffer around domain, time period checked)"
        fi
    fi
fi

if $badopts; then
    exit 1
else
    exit 0
fi
