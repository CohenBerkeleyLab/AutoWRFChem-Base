#!/bin/bash
#
# First parse arguments

# Used when filenames are given relative to the folder that
# this is called from
export AUTOCALLDIR=`pwd -P`

myname=`basename $0`
cd `dirname $0`
lnk=`readlink $myname`
if [ ! -z "$lnk" ]; then
    cd `dirname $lnk`
fi
mydir=`pwd -P`
export AUTOWRFDIR=`pwd -P`

doconfig=false
namelistonly=false
envvaroverride=false
docompile=false
doclean=false
cleaninput=false
doprepinpt=false
prepargs=""
docheckonly=false
dometonly=false
dofinishonly=false
dorun=false
runargs=""
while [ $# -gt 0 ]; do
    case $1 in
    -h|--help)
        echo ""
        echo "$myname: utility to automate the compilation and running of WRF-Chem"
        echo "  Modes of operation: "
        echo ""
        echo "    ./$myname config : will require user input to generate"
        echo "        the necessary configuration files (so don't run this as"
        echo "        part of a batch job). It will also set a global namelist"
        echo "        that will ensure WRF, WPS, and NEI are all set to the same"
        echo "        domain."
        echo ""
        echo "    ./$myname config override : will include the necessary environmental"
        echo "        variables to run WRF-Chem (EM_CORE=1, WRF_CHEM=1, etc) regardless"
        echo "        of how those variables are set in your shell. It will NOT modify"
        echo "        these variables in your shell except when this program is running."
        echo ""
        echo "    ./$myname config namelist : will only reconfigure the"
        echo "        namelist. Useful if you just need to change the domain or"
        echo "        time period."
        echo ""
        echo ""
        echo "    ./$myname compile : will execute the compilation of all"
        echo "        the components of WRF-Chem and it's input preparation,"
        echo "        including WRF-Chem, WPS, convert_emiss, emiss_v0x.F,"
        echo "        megan_bio_emiss, and mozbc. It will skip compiling if"
        echo "        it finds an existing .exe file."
        echo ""
        echo ""
        echo "    ./$myname clean : will remove all compiled files for a clean"
        echo "        compile."
        echo ""
        echo "    ./$myname clean input : will clean up the input files instead."
        echo "        It does not clean the code."
        echo ""
        echo ""
        echo "    ./$myname prepinpt : will prepare meteorology, NEI emissions,"
        echo "        MEGAN emissions, and MOZBC initial and boundary conditions."
        echo ""
        echo "    ./$myname prepinpt check : will just check that everything required"
        echo "        for preparing the input data is ready to go. Add met-only as an"
        echo "        additional argument to only check what is necessary for preparing"
        echo "        meteorology."
        echo ""
        echo "    ./$myname prepinpt met-only : will only prepare met data, and run"
        echo "        real.exe after finishing WPS."
        echo ""
        echo "    ./$myname prepinpt met-only --noreal : will not run real at the end"
        echo "        of preparing the met input."
        echo ""
        echo "    ./$myname prepinpt met-only --wpsdir=<WPS directory> : run WPS in a different"
        echo "        directory, relative to the top directory of AutoWRFChem, i.e. the one that"
        echo "        contains WRFV3, WPS, etc. This is not really meant to be called manually,"
        echo "        instead, it is a component of the split-met option"
        echo ""
        echo "    ./$myname prepinpt split-met [ --ndays=<n> ] [ --submitfile=<file> ]"
        echo "        Divides the WPS preprocessing up into time periods of ndays days, which is"
        echo "        30 by default. If a file is given via the --submitfile option, it will submit"
        echo "        jobs to a batch scheduler (e.g. SLURM or QSUB) to carry out all the necessary"
        echo "        met preprocessing. The file must be a batch submission script with a line"
        echo "        #AUTOWRFEXEC specified. That will be replaced by the necessary command to"
        echo "        run all the different WPS subdivisions."
        echo ""
        echo "    ./$myname prepinpt chem-only : run everything but WPS."
        echo ""
        echo "    ./$myname prepinpt finish : will only prepare inputs that are missing."
        echo "        Note that this is pretty simple minded with respect to met data, and"
        echo "        will simply assume that WPS succeeded if ANY met_em files are present"
        echo "        in WRFV3/run."
        echo ""
        echo ""
        echo "    ./$myname run : will run WRF-Chem. This will first check"
        echo "        that the WRF namelist.input file matches what was configured"
        echo "        by ./$myname config. If running WRF-Chem in parallel, must pass"
        echo "        the number of tasks to start (x) as --ntasks=x. If running in"
        echo "        serial, must pass the flag --nompi instead"
        echo "    ./$myname run rst : will try to find the last wrfrst file within the"
        echo "        time period in the namelist in WRFV3/run and start from there."
        echo "        If it cannot find a wrfrst file, it will abort."
        echo "    ./$myname run rst --allow-no-file : if no restart files in the proper"
        echo "        time period found, this will start from the beginning instead of"
        echo "        aborting."
        echo ""
        echo ""
        echo "  Exit codes for the compile and prepinpt steps will indicate which step"
        echo "  failed using the numeric value as a binary flag. For compile:"
        echo "      1st bit = WRF"
        echo "      2nd bit = WPS"
        echo "      3rd bit = convert_emiss"
        echo "      4th bit = emiss_v0x"
        echo "      5th bit = megan_bio_emiss"
        echo "      6th bit = mozbc"
        echo "  So an exit code of 1 means only WRF failed to compile, while 56 (= 000111)"
        echo "  means emiss_v0x, megan_bio_emiss, and mozbc all failed to compile."
        echo "  The codes are the same for prepinpt, except that the first bit will only"
        echo "  be set if you run prepinpt with the 'met-only' option, in which case it"
        echo "  reflects the success or failure of real.exe after WPS is completed."
        echo ""
        echo "  If your cluster has the concept of 'login' vs. 'compute' nodes, i.e. nodes"
        echo "  expected to be used only for light tasks (login) and those for heavy computing"
        echo "  (compute) then 'config', 'clean', and 'prepinpt check' can be safely run on"
        echo "  login-type nodes, but all other modes (including regular prepinpt) should be"
        echo "  run on compute-type nodes. ('compile' is a possible exception, if you normally"
        echo "  do compilation on a login-type node, this should be fine.)"
        echo ""
        echo "  Note that this utility is only set up to handle one domain currently."
        echo ""
        exit 0
        ;;
    config)
        doconfig=true
        ;;
    namelist)
        namelistonly=true
        ;;
    override|--override)
        envvaroverride=true
        runargs="$runargs --override"
        ;;
    compile)
        docompile=true
        ;;
    clean)
        doclean=true
        ;;
    input)
        cleaninput=true
        ;;
    prepinpt)
        doprepinpt=true
        ;;
    check)
        prepargs="$prepargs --check-only"
        ;;
    met-only)
        prepargs="$prepargs --met-only"
        ;;
    chem-only)
        prepargs="$prepargs --chem-only"
        ;;
    split-met)
        prepargs="$prepargs --splitmet"
        ;;
    finish)
        prepargs="$prepargs --finish-only"
        ;;
    --noreal|--wpsdir*|--ndays*|--submitfile*)
        prepargs="$prepargs $1"
        ;;
    run)
        dorun=true
        ;;
    --ntasks=*)
        runargs="$runargs $1"
        ;;
    --nompi)
        runargs="$runargs $1"
        ;;
    rst)
        runargs="$runargs --restart"
        ;;
    --allow-no-file)
        runargs="$runargs --allow-no-file"
        ;;
    *)
        echo "$1 is not a recognized option"
        exit 1
        ;;
    esac
    shift
done

# Check that directory structure is intact
cd ..
missingdir=""
if [ ! -d WRFV3 ]; then missingdir="$missingdir WRFV3"; fi
if [ ! -d WPS ]; then missingdir="$missingdir WPS"; fi
if [ ! -d NEI ]; then missingdir="$missingdir NEI"; fi
if [ ! -d MEGAN ]; then missingdir="$missingdir MEGAN"; fi
if [ ! -d MOZBC ]; then missingdir="$missingdir MOZBC"; fi

if [ ! -z "$missingdir" ]; then
    echo "The directory(ies) $missingdir are not present as child directories."
    exit 1
fi


cd $mydir
if $doconfig; then
    configopts=""
    if $namelistonly; then
        configopts="$configopts --namelist-only"
    fi
    if $envvaroverride; then
        configopts="$configopts --override"
    fi
    ./configure $configopts # set env vars and all namelist options.
    configexit=$?

    if [ $configexit -eq 0 ]; then
        if ! $namelistonly; then
            echo ""
            echo "*****************************************************************************"
            echo "Configuration files generated. Run $myname with 'compile' to begin compilation"
            echo "*****************************************************************************"
            echo ""
        fi
    fi
 
    exit $configexit
fi
if $doclean; then
    if $cleaninput; then
        $mydir/cleanall --input
    else
        $mydir/cleanall
    fi
    exit $?
fi
if $docompile; then
    $mydir/compileall
    compexit=$?
    if [ $compexit -ne 0 ]; then
        echo "***********************************************"
        echo "One or more compilations failed (exit status $compexit)"  
        echo "***********************************************"
    fi
    exit $compexit
fi
if $doprepinpt; then
    $mydir/prepinpt $prepargs
    exit $?
fi
if $dorun; then
    if $dometonly; then
        runargs="$runargs --met-only"
    fi

    $mydir/runwrf $runargs
    exit $?
fi

echo "No action specified. See help for usage of $myname."
exit 0

